Data: 30/03/2017

1. Quantos pipes serão criados após as linhas de código a seguir? Por quê?
	(a) int pid;
		int	fd[2];
		pipe(fd);
		pid = fork();

// ele cria 1 pipe, pois o pipe foi criado antes do fork

	(b) int pid;
		int	fd[2];
		pid = fork();
		pipe(fd);

// ele cria 2 pipe, pois o pipe e criado depois do fork

2. Apresente mais cinco sinais importantes do ambiente Unix, além do SIGSEGV, SIGUSR1, SIGUSR2, SIGALRM e SIGINT. Quais são suas características e utilidades?

			SIGHUP - sinal emitido aos processos associados a um terminal quando ele se "desconecta";
			SIGQUIT - Sinal emitido aos processos do terminal quando acionada a tecla de abandono (Ctrl + D);
			SIGPIPE - Escrita sobre um pipe aberto em leitura
			SIGTERM - terminação por software: emitida quando o programa termina de maneira normal;
			SIGCLD - morte de um filho: enviado ao pai pela terminação de um processo filho;

3. Considere o código a seguir:

	 1. #include <signal.h>
	 2. #include <unistd.h>
	 3. #include <stdio.h>
	 4. #include <stdlib.h>
	 5.
	 6. void tratamento_alarme(int sig)
	 7. {
	 8. 	system("date");
	 9. 	alarm(1);
	10. }
	11. 
	12. int main()
	13. {
	14. 	signal(SIGALRM, tratamento_alarme);
	15. 	alarm(1);
	16. 	printf("Aperte CTRL+C para acabar:\n");
	17. 	while(1);
	18. 	return 0;
	19. }

Sabendo que a função alarm() tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os alarmes criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo real?

//A precisão da função alarm() nesse código éde 1 segundo. A imprecisão vem do atraso da chamada da função que leva alguma parcela muito pequena de tempo, no entanto, em longo prazo geram um atraso grande no alarme. 
